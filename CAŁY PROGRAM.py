import tkinter as tk
import matplotlib.pyplot as plt
import numpy as np
import pygame
import random
from PIL import ImageTk, Image

def open_game():
    # Inicjalizacja gry
    pygame.init()

    # Ustawienia okna
    screen = pygame.display.set_mode((400, 600))
    pygame.display.set_caption("Flappy Bird")

    # Kolory
    WHITE = (255, 255, 255)
    BLACK = (0, 0, 0)
    GREEN = (0, 255, 0)

    # Czcionka
    font = pygame.font.SysFont(None, 30)

    # Tekst
    def message_to_screen(msg, color):
        screen_text = font.render(msg, True, color)
        screen.blit(screen_text, [400 / 2, 600 / 2])

    # Funkcja do generowania przeszkód
    def generate_obstacles(xloc, yloc, xsize, ysize):
        pygame.draw.rect(screen, GREEN, [xloc, yloc, xsize, ysize])
        pygame.draw.rect(screen, GREEN, [xloc, int(yloc + ysize + 100), xsize, 500])

    # Funkcja do obsługi kolizji
    def collision_check(xloc, yloc, xsize, ysize, x, y):
        if x + 20 > xloc and x - 15 < xloc + xsize:
            if y - 15 < yloc + ysize or y + 15 > yloc + ysize + 100:
                return True
        return False

    # Główna funkcja gry
    def game():
        x = 150
        y = 200
        y_move = 0

        # Ustawienia przeszkód
        xloc = 700
        yloc = 0
        xsize = 70
        ysize = random.randint(0, 350)

        # Prędkość gry
        speed = 0.1

        # Licznik punktów
        score = 0

        # Pętla gry
        while True:
            # Obsługa zdarzeń
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_UP:
                        y_move = -0.1
                if event.type == pygame.KEYUP:
                    if event.key == pygame.K_UP:
                        y_move = 0.1

            # Ruch tła
            screen.fill(WHITE)

            # Ruch ptaka
            y += y_move

            # Rysowanie ptaka
            pygame.draw.circle(screen, BLACK, [x, y], 20)

            # Generowanie przeszkód
            generate_obstacles(xloc, yloc, xsize, ysize)

            # Ruch przeszkód
            xloc -= speed

            # Kolizje
            collision = collision_check(xloc, yloc, xsize, ysize, x, y)
            if collision:
                message_to_screen("Przegrałeś!", BLACK)
                pygame.display.update()
                pygame.time.wait(2000)
                game()

            # Wyświetlanie punktów
            if xloc < -80:
                xloc = 700
                ysize = random.randint(0, 350)
                score += 1
            text = font.render("Wynik: " + str(score), True, BLACK)
            screen.blit(text, [0, 0])

            # Aktualizacja okna
            pygame.display.update()

    # Rozpoczęcie gry
    game()

def open_initials():
    D = np.array([[0, 0], [0, 0], [0, 5], [0, 5], [2.5, 5], [3, 0.5], [0, 0]])
    S = np.array([[3, 1], [3.4, -1], [6.5, -1], [6.5, 2.5], [5, 4], [3, 1], [2, 2.6], [2, 6], [4.8, 6], [5.2, 4]])

    def bezier_curve(points, n_points=100):
        t = np.linspace(0, 1, n_points)
        n = points.shape[0] - 1
        curve = np.zeros((n_points, 2))
        for i in range(n_points):
            for j in range(n + 1):
                curve[i] += points[j] * (1 - t[i]) ** (n - j) * t[i] ** j * np.math.factorial(n) / (
                            np.math.factorial(j) * np.math.factorial(n - j))
        return curve

    curveD1 = bezier_curve(D[0:4])
    curveD2 = bezier_curve(D[3:])

    curveS1 = bezier_curve(S[0:10])

    plt.plot(curveD1[:, 0], curveD1[:, 1], 'maroon', linewidth=5)
    plt.plot(curveD2[:, 0], curveD2[:, 1], 'maroon', linewidth=5)

    plt.plot(curveS1[:, 0], curveS1[:, 1], 'maroon', linewidth=5)

    plt.axis('equal')
    plt.show()

def open_kettle():
    def silnia(n):
        if n == 0:
            return 1
        else:
            return n * silnia(n - 1)

    def dwumian(n, i):
        return silnia(n) / (silnia(i) * silnia(n - i))

    # Rysowanie powierzchni Béziera
    def plot_bezier_surface(points):
        n = len(points)
        m = len(points[0])
        X = np.zeros((n, m))
        Y = np.zeros((n, m))
        Z = np.zeros((n, m))
        for i in range(n):
            for j in range(m):
                X[i][j] = points[i][j][0]
                Y[i][j] = points[i][j][1]
                Z[i][j] = points[i][j][2]
        u = np.linspace(0, 1, 100)
        v = np.linspace(0, 1, 100)
        x = np.zeros((100, 100))
        y = np.zeros((100, 100))
        z = np.zeros((100, 100))
        for i in range(100):
            for j in range(100):
                for k in range(n):
                    for l in range(m):
                        x[i][j] += X[k][l] * dwumian(n - 1, k) * pow((1 - u[i]), (n - 1 - k)) * pow(u[i], k) * \
                                   dwumian(m - 1, l) * pow((1 - v[j]), (m - 1 - l)) * pow(v[j], l)
                        y[i][j] += Y[k][l] * dwumian(n - 1, k) * pow((1 - u[i]), (n - 1 - k)) * pow(u[i], k) * \
                                   dwumian(m - 1, l) * pow((1 - v[j]), (m - 1 - l)) * pow(v[j], l)
                        z[i][j] += Z[k][l] * dwumian(n - 1, k) * pow((1 - u[i]), (n - 1 - k)) * pow(u[i], k) * \
                                   dwumian(m - 1, l) * pow((1 - v[j]), (m - 1 - l)) * pow(v[j], l)
        ax.plot_surface(x, y, z)

    points1 = [
        [(1.4, 0.0, 2.4), (1.4, -0.784, 2.4), (0.784, -1.4, 2.4), (0.0, -1.4, 2.4)],
        [(1.3375, 0.0, 2.53125), (1.3375, -0.749, 2.53125), (0.749, -1.3375, 2.53125), (0.0, -1.3375, 2.53125)],
        [(1.4375, 0.0, 2.53125), (1.4375, -0.805, 2.53125), (0.805, -1.4375, 2.53125), (0.0, -1.4375, 2.53125)],
        [(1.5, 0.0, 2.4), (1.5, -0.84, 2.4), (0.84, -1.5, 2.4), (0.0, -1.5, 2.4)]
    ]
    points2 = [[(0.0, -1.4, 2.4), (-0.784, -1.4, 2.4), (-1.4, -0.784, 2.4), (-1.4, 0.0, 2.4)],
               [(0.0, -1.3375, 2.53125), (-0.749, -1.3375, 2.53125), (-1.3375, -0.749, 2.53125),
                (-1.3375, 0.0, 2.53125)],
               [(0.0, -1.4375, 2.53125), (-0.805, -1.4375, 2.53125), (-1.4375, -0.805, 2.53125),
                (-1.4375, 0.0, 2.53125)],
               [(0.0, -1.5, 2.4), (-0.84, -1.5, 2.4), (-1.5, -0.84, 2.4), (-1.5, 0.0, 2.4)]
               ]

    points3 = [[(-1.4, 0.0, 2.4), (-1.4, 0.784, 2.4), (-0.784, 1.4, 2.4), (0.0, 1.4, 2.4)],
               [(-1.3375, 0.0, 2.53125), (-1.3375, 0.749, 2.53125), (-0.749, 1.3375, 2.53125), (0.0, 1.3375, 2.53125)],
               [(-1.4375, 0.0, 2.53125), (-1.4375, 0.805, 2.53125), (-0.805, 1.4375, 2.53125), (0.0, 1.4375, 2.53125)],
               [(-1.5, 0.0, 2.4), (-1.5, 0.84, 2.4), (-0.84, 1.5, 2.4), (0.0, 1.5, 2.4)]
               ]

    points4 = [[(0.0, 1.4, 2.4), (0.784, 1.4, 2.4), (1.4, 0.784, 2.4), (1.4, 0.0, 2.4)],
               [(0.0, 1.3375, 2.53125), (0.749, 1.3375, 2.53125), (1.3375, 0.749, 2.53125), (1.3375, 0.0, 2.53125)],
               [(0.0, 1.4375, 2.53125), (0.805, 1.4375, 2.53125), (1.4375, 0.805, 2.53125), (1.4375, 0.0, 2.53125)],
               [(0.0, 1.5, 2.4), (0.84, 1.5, 2.4), (1.5, 0.84, 2.4), (1.5, 0.0, 2.4)]
               ]

    points5 = [
        [(1.5, 0.0, 2.4), (1.5, -0.84, 2.4), (0.84, -1.5, 2.4), (0.0, -1.5, 2.4)],
        [(1.75, 0.0, 1.875), (1.75, -0.98, 1.875), (0.98, -1.75, 1.875), (0.0, -1.75, 1.875)],
        [(2.0, 0.0, 1.35), (2.0, -1.12, 1.35), (1.12, -2.0, 1.35), (0.0, -2.0, 1.35)],
        [(2.0, 0.0, 0.9), (2.0, -1.12, 0.9), (1.12, -2.0, 0.9), (0.0, -2.0, 0.9)]
    ]

    points6 = [
        [(0.0, -1.5, 2.4), (-0.84, -1.5, 2.4), (-1.5, -0.84, 2.4), (-1.5, 0.0, 2.4)],
        [(0.0, -1.75, 1.875), (-0.98, -1.75, 1.875), (-1.75, -0.98, 1.875), (-1.75, 0.0, 1.875)],
        [(0.0, -2.0, 1.35), (-1.12, -2.0, 1.35), (-2.0, -1.12, 1.35), (-2.0, 0.0, 1.35)],
        [(0.0, -2.0, 0.9), (-1.12, -2.0, 0.9), (-2.0, -1.12, 0.9), (-2.0, 0.0, 0.9)]
    ]

    points7 = [
        [(-1.5, 0.0, 2.4), (-1.5, 0.84, 2.4), (-0.84, 1.5, 2.4), (0.0, 1.5, 2.4)],
        [(-1.75, 0.0, 1.875), (-1.75, 0.98, 1.875), (-0.98, 1.75, 1.875), (0.0, 1.75, 1.875)],
        [(-2.0, 0.0, 1.35), (-2.0, 1.12, 1.35), (-1.12, 2.0, 1.35), (0.0, 2.0, 1.35)],
        [(-2.0, 0.0, 0.9), (-2.0, 1.12, 0.9), (-1.12, 2.0, 0.9), (0.0, 2.0, 0.9)]
    ]

    points8 = [
        [(0.0, 1.5, 2.4), (0.84, 1.5, 2.4), (1.5, 0.84, 2.4), (1.5, 0.0, 2.4)],
        [(0.0, 1.75, 1.875), (0.98, 1.75, 1.875), (1.75, 0.98, 1.875), (1.75, 0.0, 1.875)],
        [(0.0, 2.0, 1.35), (1.12, 2.0, 1.35), (2.0, 1.12, 1.35), (2.0, 0.0, 1.35)],
        [(0.0, 2.0, 0.9), (1.12, 2.0, 0.9), (2.0, 1.12, 0.9), (2.0, 0.0, 0.9)]
    ]

    points9 = [
        [(2.0, 0.0, 0.9), (2.0, -1.12, 0.9), (1.12, -2.0, 0.9), (0.0, -2.0, 0.9)],
        [(2.0, 0.0, 0.45), (2.0, -1.12, 0.45), (1.12, -2.0, 0.45), (0.0, -2.0, 0.45)],
        [(1.5, 0.0, 0.225), (1.5, -0.84, 0.225), (0.84, -1.5, 0.225), (0.0, -1.5, 0.225)],
        [(1.5, 0.0, 0.15), (1.5, -0.84, 0.15), (0.84, -1.5, 0.15), (0.0, -1.5, 0.15)]
    ]

    points10 = [[(0.0, -2.0, 0.9), (-1.12, -2.0, 0.9), (-2.0, -1.12, 0.9), (-2.0, 0.0, 0.9)],
                [(0.0, -2.0, 0.45), (-1.12, -2.0, 0.45), (-2.0, -1.12, 0.45), (-2.0, 0.0, 0.45)],
                [(0.0, -1.5, 0.225), (-0.84, -1.5, 0.225), (-1.5, -0.84, 0.225), (-1.5, 0.0, 0.225)],
                [(0.0, -1.5, 0.15), (-0.84, -1.5, 0.15), (-1.5, -0.84, 0.15), (-1.5, 0.0, 0.15)]
                ]

    points11 = [
        [(-2.0, 0.0, 0.9), (-2.0, 1.12, 0.9), (-1.12, 2.0, 0.9), (0.0, 2.0, 0.9)],
        [(-2.0, 0.0, 0.45), (-2.0, 1.12, 0.45), (-1.12, 2.0, 0.45), (0.0, 2.0, 0.45)],
        [(-1.5, 0.0, 0.225), (-1.5, 0.84, 0.225), (-0.84, 1.5, 0.225), (0.0, 1.5, 0.225)],
        [(-1.5, 0.0, 0.15), (-1.5, 0.84, 0.15), (-0.84, 1.5, 0.15), (0.0, 1.5, 0.15)]
    ]

    points12 = [[(0.0, 2.0, 0.9), (1.12, 2.0, 0.9), (2.0, 1.12, 0.9), (2.0, 0.0, 0.9)],
                [(0.0, 2.0, 0.45), (1.12, 2.0, 0.45), (2.0, 1.12, 0.45), (2.0, 0.0, 0.45)],
                [(0.0, 1.5, 0.225), (0.84, 1.5, 0.225), (1.5, 0.84, 0.225), (1.5, 0.0, 0.225)],
                [(0.0, 1.5, 0.15), (0.84, 1.5, 0.15), (1.5, 0.84, 0.15), (1.5, 0.0, 0.15)]
                ]

    points13 = [
        [(-1.6, 0.0, 2.025), (-1.6, -0.3, 2.025), (-1.5, -0.3, 2.25), (-1.5, 0.0, 2.25)],
        [(-2.3, 0.0, 2.025), (-2.3, -0.3, 2.025), (-2.5, -0.3, 2.25), (-2.5, 0.0, 2.25)],
        [(-2.7, 0.0, 2.025), (-2.7, -0.3, 2.025), (-3.0, -0.3, 2.25), (-3.0, 0.0, 2.25)],
        [(-2.7, 0.0, 1.8), (-2.7, -0.3, 1.8), (-3.0, -0.3, 1.8), (-3.0, 0.0, 1.8)]
    ]

    points14 = [
        [(-1.5, 0.0, 2.25), (-1.5, 0.3, 2.25), (-1.6, 0.3, 2.025), (-1.6, 0.0, 2.025)],
        [(-2.5, 0.0, 2.25), (-2.5, 0.3, 2.25), (-2.3, 0.3, 2.025), (-2.3, 0.0, 2.025)],
        [(-3.0, 0.0, 2.25), (-3.0, 0.3, 2.25), (-2.7, 0.3, 2.025), (-2.7, 0.0, 2.025)],
        [(-3.0, 0.0, 1.8), (-3.0, 0.3, 1.8), (-2.7, 0.3, 1.8), (-2.7, 0.0, 1.8)]
    ]

    points15 = [[(-2.7, 0.0, 1.8), (-2.7, -0.3, 1.8), (-3.0, -0.3, 1.8), (-3.0, 0.0, 1.8)],
                [(-2.7, 0.0, 1.575), (-2.7, -0.3, 1.575), (-3.0, -0.3, 1.35), (-3.0, 0.0, 1.35)],
                [(-2.5, 0.0, 1.125), (-2.5, -0.3, 1.125), (-2.65, -0.3, 0.9375), (-2.65, 0.0, 0.9375)],
                [(-2.0, 0.0, 0.9), (-2.0, -0.3, 0.9), (-1.9, -0.3, 0.6), (-1.9, 0.0, 0.6)]
                ]

    points16 = [
        [(-3.0, 0.0, 1.8), (-3.0, 0.3, 1.8), (-2.7, 0.3, 1.8), (-2.7, 0.0, 1.8)],
        [(-3.0, 0.0, 1.35), (-3.0, 0.3, 1.35), (-2.7, 0.3, 1.575), (-2.7, 0.0, 1.575)],
        [(-2.65, 0.0, 0.9375), (-2.65, 0.3, 0.9375), (-2.5, 0.3, 1.125), (-2.5, 0.0, 1.125)],
        [(-1.9, 0.0, 0.6), (-1.9, 0.3, 0.6), (-2.0, 0.3, 0.9), (-2.0, 0.0, 0.9)]
    ]

    points17 = [
        [(1.7, 0.0, 1.425), (1.7, -0.66, 1.425), (1.7, -0.66, 0.6), (1.7, 0.0, 0.6)],
        [(2.6, 0.0, 1.425), (2.6, -0.66, 1.425), (3.1, -0.66, 0.825), (3.1, 0.0, 0.825)],
        [(2.3, 0.0, 2.1), (2.3, -0.25, 2.1), (2.4, -0.25, 2.025), (2.4, 0.0, 2.025)],
        [(2.7, 0.0, 2.4), (2.7, -0.25, 2.4), (3.3, -0.25, 2.4), (3.3, 0.0, 2.4)]
    ]

    points18 = [
        [(1.7, 0.0, 0.6), (1.7, 0.66, 0.6), (1.7, 0.66, 1.425), (1.7, 0.0, 1.425)],
        [(3.1, 0.0, 0.825), (3.1, 0.66, 0.825), (2.6, 0.66, 1.425), (2.6, 0.0, 1.425)],
        [(2.4, 0.0, 2.025), (2.4, 0.25, 2.025), (2.3, 0.25, 2.1), (2.3, 0.0, 2.1)],
        [(3.3, 0.0, 2.4), (3.3, 0.25, 2.4), (2.7, 0.25, 2.4), (2.7, 0.0, 2.4)]
    ]

    points19 = [
        [(2.7, 0.0, 2.4), (2.7, -0.25, 2.4), (3.3, -0.25, 2.4), (3.3, 0.0, 2.4)],
        [(2.8, 0.0, 2.475), (2.8, -0.25, 2.475), (3.525, -0.25, 2.49375), (3.525, 0.0, 2.49375)],
        [(2.9, 0.0, 2.475), (2.9, -0.15, 2.475), (3.45, -0.15, 2.5125), (3.45, 0.0, 2.5125)],
        [(2.8, 0.0, 2.4), (2.8, -0.15, 2.4), (3.2, -0.15, 2.4), (3.2, 0.0, 2.4)]
    ]

    points20 = [
        [(3.3, 0.0, 2.4), (3.3, 0.25, 2.4), (2.7, 0.25, 2.4), (2.7, 0.0, 2.4)],
        [(3.525, 0.0, 2.49375), (3.525, 0.25, 2.49375), (2.8, 0.25, 2.475), (2.8, 0.0, 2.475)],
        [(3.45, 0.0, 2.5125), (3.45, 0.15, 2.5125), (2.9, 0.15, 2.475), (2.9, 0.0, 2.475)],
        [(3.2, 0.0, 2.4), (3.2, 0.15, 2.4), (2.8, 0.15, 2.4), (2.8, 0.0, 2.4)]
    ]

    points21 = [
        [(0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15)],
        [(0.0, -0.8, 3.15), (-0.45, -0.8, 3.15), (-0.8, -0.45, 3.15), (-0.8, 0.0, 3.15)],
        [(0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85)],
        [(0.0, -0.2, 2.7), (-0.112, -0.2, 2.7), (-0.2, -0.112, 2.7), (-0.2, 0.0, 2.7)]
    ]

    points22 = [
        [(0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15)],
        [(0.0, -0.8, 3.15), (-0.45, -0.8, 3.15), (-0.8, -0.45, 3.15), (-0.8, 0.0, 3.15)],
        [(0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85)],
        [(0.0, -0.2, 2.7), (-0.112, -0.2, 2.7), (-0.2, -0.112, 2.7), (-0.2, 0.0, 2.7)]
    ]

    points23 = [
        [(0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15)],
        [(-0.8, 0.0, 3.15), (-0.8, 0.45, 3.15), (-0.45, 0.8, 3.15), (0.0, 0.8, 3.15)],
        [(0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85)],
        [(-0.2, 0.0, 2.7), (-0.2, 0.112, 2.7), (-0.112, 0.2, 2.7), (0.0, 0.2, 2.7)]
    ]

    points24 = [
        [(0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15), (0.0, 0.0, 3.15)],
        [(0.0, 0.8, 3.15), (0.45, 0.8, 3.15), (0.8, 0.45, 3.15), (0.8, 0.0, 3.15)],
        [(0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85), (0.0, 0.0, 2.85)],
        [(0.0, 0.2, 2.7), (0.112, 0.2, 2.7), (0.2, 0.112, 2.7), (0.2, 0.0, 2.7)]
    ]

    points25 = [
        [(0.2, 0.0, 2.7), (0.2, -0.112, 2.7), (0.112, -0.2, 2.7), (0.0, -0.2, 2.7)],
        [(0.4, 0.0, 2.55), (0.4, -0.224, 2.55), (0.224, -0.4, 2.55), (0.0, -0.4, 2.55)],
        [(1.3, 0.0, 2.55), (1.3, -0.728, 2.55), (0.728, -1.3, 2.55), (0.0, -1.3, 2.55)],
        [(1.3, 0.0, 2.4), (1.3, -0.728, 2.4), (0.728, -1.3, 2.4), (0.0, -1.3, 2.4)],
    ]

    points26 = [
        [(0.0, -0.2, 2.7), (-0.112, -0.2, 2.7), (-0.2, -0.112, 2.7), (-0.2, 0.0, 2.7)],
        [(0.0, -0.4, 2.55), (-0.224, -0.4, 2.55), (-0.4, -0.224, 2.55), (-0.4, 0.0, 2.55)],
        [(0.0, -1.3, 2.55), (-0.728, -1.3, 2.55), (-1.3, -0.728, 2.55), (-1.3, 0.0, 2.55)],
        [(0.0, -1.3, 2.4), (-0.728, -1.3, 2.4), (-1.3, -0.728, 2.4), (-1.3, 0.0, 2.4)],
    ]

    points27 = [
        [(-0.2, 0.0, 2.7), (-0.2, 0.112, 2.7), (-0.112, 0.2, 2.7), (0.0, 0.2, 2.7)],
        [(-0.4, 0.0, 2.55), (-0.4, 0.224, 2.55), (-0.224, 0.4, 2.55), (0.0, 0.4, 2.55)],
        [(-1.3, 0.0, 2.55), (-1.3, 0.728, 2.55), (-0.728, 1.3, 2.55), (0.0, 1.3, 2.55)],
        [(-1.3, 0.0, 2.4), (-1.3, 0.728, 2.4), (-0.728, 1.3, 2.4), (0.0, 1.3, 2.4)]
    ]

    points28 = [
        [(0.0, 0.2, 2.7), (0.112, 0.2, 2.7), (0.2, 0.112, 2.7), (0.0, 0.0, 2.7)],
        [(0.0, 0.4, 2.55), (0.224, 0.4, 2.55), (0.4, 0.224, 2.55), (0.0, 0.0, 2.55)],
        [(0.0, 1.3, 2.55), (0.728, 1.3, 2.55), (1.3, 0.728, 2.55), (1.3, 0.0, 2.55)],
        [(0.0, 1.3, 2.4), (0.728, 1.3, 2.4), (1.3, 0.728, 2.4), (1.3, 0.0, 2.4)]
    ]

    points29 = [
        [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)],
        [(1.425, 0.0, 0.0), (1.425, 0.798, 0.0), (0.798, 1.425, 0.0), (0.0, 1.425, 0.0)],
        [(1.5, 0.0, 0.075), (1.5, 0.84, 0.075), (0.84, 1.5, 0.075), (0.0, 1.5, 0.075)],
        [(1.5, 0.0, 0.15), (1.5, 0.84, 0.15), (0.84, 1.5, 0.15), (0.0, 1.5, 0.15)]
    ]

    points30 = [
        [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)],
        [(0.0, 1.425, 0.0), (-0.798, 1.425, 0.0), (-1.425, 0.798, 0.0), (-1.425, 0.0, 0.0)],
        [(0.0, 1.5, 0.075), (-0.84, 1.5, 0.075), (-1.5, 0.84, 0.075), (-1.5, 0.0, 0.075)],
        [(0.0, 1.5, 0.15), (-0.84, 1.5, 0.15), (-1.5, 0.84, 0.15), (-1.5, 0.0, 0.15)]
    ]

    points31 = [
        [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)],
        [(-1.425, 0.0, 0.0), (-1.425, -0.798, 0.0), (-0.798, -1.425, 0.0), (0.0, -1.425, 0.0)],
        [(-1.5, 0.0, 0.075), (-1.5, -0.84, 0.075), (-0.84, -1.5, 0.075), (0.0, -1.5, 0.075)],
        [(-1.5, 0.0, 0.15), (-1.5, -0.84, 0.15), (-0.84, -1.5, 0.15), (0.0, -1.5, 0.15)]
    ]

    points32 = [
        [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)],
        [(0.0, -1.425, 0.0), (0.798, -1.425, 0.0), (1.425, -0.798, 0.0), (1.425, 0.0, 0.0)],
        [(0.0, -1.5, 0.075), (0.84, -1.5, 0.075), (1.5, -0.84, 0.075), (1.5, 0.0, 0.075)],
        [(0.0, -1.5, 0.15), (0.84, -1.5, 0.15), (1.5, -0.84, 0.15), (1.5, 0.0, 0.15)]
    ]

    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    plot_bezier_surface(points1)
    plot_bezier_surface(points2)
    plot_bezier_surface(points3)
    plot_bezier_surface(points4)
    plot_bezier_surface(points5)
    plot_bezier_surface(points6)
    plot_bezier_surface(points7)
    plot_bezier_surface(points8)
    plot_bezier_surface(points9)
    plot_bezier_surface(points10)
    plot_bezier_surface(points11)
    plot_bezier_surface(points12)
    plot_bezier_surface(points13)
    plot_bezier_surface(points14)
    plot_bezier_surface(points15)
    plot_bezier_surface(points16)
    plot_bezier_surface(points17)
    plot_bezier_surface(points18)
    plot_bezier_surface(points19)
    plot_bezier_surface(points20)
    plot_bezier_surface(points21)
    plot_bezier_surface(points22)
    plot_bezier_surface(points23)
    plot_bezier_surface(points24)
    plot_bezier_surface(points25)
    plot_bezier_surface(points26)
    plot_bezier_surface(points27)
    plot_bezier_surface(points28)
    plot_bezier_surface(points29)
    plot_bezier_surface(points30)
    plot_bezier_surface(points31)
    plot_bezier_surface(points32)
    plt.show()

root = tk.Tk()
root.geometry("300x400")

background_image = ImageTk.PhotoImage(Image.open("background.jpg"))
background_label = tk.Label(root, image=background_image)
background_label.place(relwidth=1, relheight=1)

menu_frame = tk.Frame(root)
menu_frame.pack(pady=50)

game_button = tk.Button(menu_frame, text="Gra", width=20, height=2, font=("Helvetica", 16), command=open_game)
game_button.pack(pady=10)

initials_button = tk.Button(menu_frame, text="Inicjały", width=20, height=2, font=("Helvetica", 16), command=open_initials)
initials_button.pack(pady=10)

kettle_button = tk.Button(menu_frame, text="Czajnik", width=20, height=2, font=("Helvetica", 16), command=open_kettle)
kettle_button.pack(pady=10)
root.mainloop()